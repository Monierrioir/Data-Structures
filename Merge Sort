#include <stdio.h>

void merge(int arr[], int left, int mid, int right);
void mergesort(int arr[], int left, int right);

void mergesort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;  // Fix: Calculate mid without potential overflow
        mergesort(arr, left, mid);
        mergesort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void merge(int arr[], int left, int mid, int right) {
    int size = right - left + 1;  // Fix: Calculate the size of the temporary array
    int i, j, k = 0;
    int temp[size];  // Temporary array

    for (i = left, j = mid + 1; i <= mid && j <= right; ) {
        if (arr[i] < arr[j]) {
            temp[k] = arr[i];
            i++;
        } else {
            temp[k] = arr[j];
            j++;
        }
        k++;
    }

    while (i <= mid) {
        temp[k] = arr[i];
        i++;
        k++;
    }
    while (j <= right) {
        temp[k] = arr[j];
        j++;
        k++;
    }

    for (i = left, k = 0; i <= right; i++, k++)
        arr[i] = temp[k];
}

int main() {
    int arr[] = {7, 5, 8, 1, 3};
    int right = sizeof(arr) / sizeof(arr[0]) - 1;
    mergesort(arr, 0, right);

    for (int a = 0; a <= right; a++) {
        printf("%d\n", arr[a]);
    }

    return 0;
}
